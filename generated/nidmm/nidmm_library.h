//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-DMM
//---------------------------------------------------------------------
#ifndef NIDMM_GRPC_LIBRARY_H
#define NIDMM_GRPC_LIBRARY_H

#include "nidmm_library_interface.h"

#include <server/shared_library.h>

namespace nidmm_grpc {

class NiDmmLibrary : public nidmm_grpc::NiDmmLibraryInterface {
 public:
  NiDmmLibrary();
  virtual ~NiDmmLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  ViStatus Abort(ViSession vi);
  ViStatus ConfigureCurrentSource(ViSession vi, ViReal64 currentSource);
  ViStatus ConfigureMeasurementAbsolute(ViSession vi, ViInt32 measurementFunction, ViReal64 range, ViReal64 resolutionAbsolute);
  ViStatus ConfigureMeasurementDigits(ViSession vi, ViInt32 measurementFunction, ViReal64 range, ViReal64 resolutionDigits);
  ViStatus ConfigureMultiPoint(ViSession vi, ViInt32 triggerCount, ViInt32 sampleCount, ViInt32 sampleTrigger, ViReal64 sampleInterval);
  ViStatus ConfigureRTDCustom(ViSession vi, ViReal64 rtdA, ViReal64 rtdB, ViReal64 rtdC);
  ViStatus ConfigureRTDType(ViSession vi, ViInt32 rtdType, ViReal64 rtdResistance);
  ViStatus ConfigureThermistorCustom(ViSession vi, ViReal64 thermistorA, ViReal64 thermistorB, ViReal64 thermistorC);
  ViStatus ConfigureThermocouple(ViSession vi, ViInt32 thermocoupleType, ViInt32 referenceJunctionType);
  ViStatus ConfigureTrigger(ViSession vi, ViInt32 triggerSource, ViReal64 triggerDelay);
  ViStatus ConfigureWaveformAcquisition(ViSession vi, ViInt32 measurementFunction, ViReal64 range, ViReal64 rate, ViInt32 waveformPoints);
  ViStatus Disable(ViSession vi);
  ViStatus ExportAttributeConfigurationBuffer(ViSession vi, ViInt32 size, ViInt8 configuration[]);
  ViStatus ExportAttributeConfigurationFile(ViSession vi, ViConstString filePath);
  ViStatus Fetch(ViSession vi, ViInt32 maximumTime, ViReal64* reading);
  ViStatus FetchMultiPoint(ViSession vi, ViInt32 maximumTime, ViInt32 arraySize, ViReal64 readingArray[], ViInt32* actualNumberOfPoints);
  ViStatus FetchWaveform(ViSession vi, ViInt32 maximumTime, ViInt32 arraySize, ViReal64 waveformArray[], ViInt32* actualNumberOfPoints);
  ViStatus GetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean* attributeValue);
  ViStatus GetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32* attributeValue);
  ViStatus GetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64* attributeValue);
  ViStatus GetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession* attributeValue);
  ViStatus GetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 bufferSize, ViChar attributeValue[]);
  ViStatus GetCalDateAndTime(ViSession vi, ViInt32 calType, ViInt32* month, ViInt32* day, ViInt32* year, ViInt32* hour, ViInt32* minute);
  ViStatus GetDevTemp(ViSession vi, ViString options, ViReal64* temperature);
  ViStatus GetError(ViSession vi, ViStatus* errorCode, ViInt32 bufferSize, ViChar description[]);
  ViStatus GetErrorMessage(ViSession vi, ViStatus errorCode, ViInt32 bufferSize, ViChar errorMessage[]);
  ViStatus GetExtCalRecommendedInterval(ViSession vi, ViInt32* months);
  ViStatus GetLastCalTemp(ViSession vi, ViInt32 calType, ViReal64* temperature);
  ViStatus GetSelfCalSupported(ViSession vi, ViBoolean* selfCalSupported);
  ViStatus ImportAttributeConfigurationBuffer(ViSession vi, ViInt32 size, ViInt8 configuration[]);
  ViStatus ImportAttributeConfigurationFile(ViSession vi, ViConstString filePath);
  ViStatus InitWithOptions(ViString resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViString optionString, ViSession* vi);
  ViStatus Initiate(ViSession vi);
  ViStatus LockSession(ViSession vi, ViBoolean* callerHasLock);
  ViStatus PerformOpenCableComp(ViSession vi, ViReal64* conductance, ViReal64* susceptance);
  ViStatus PerformShortCableComp(ViSession vi, ViReal64* resistance, ViReal64* reactance);
  ViStatus Read(ViSession vi, ViInt32 maximumTime, ViReal64* reading);
  ViStatus ReadMultiPoint(ViSession vi, ViInt32 maximumTime, ViInt32 arraySize, ViReal64 readingArray[], ViInt32* actualNumberOfPoints);
  ViStatus ReadStatus(ViSession vi, ViInt32* acquisitionBacklog, ViInt16* acquisitionStatus);
  ViStatus ReadWaveform(ViSession vi, ViInt32 maximumTime, ViInt32 arraySize, ViReal64 waveformArray[], ViInt32* actualNumberOfPoints);
  ViStatus ResetWithDefaults(ViSession vi);
  ViStatus SelfCal(ViSession vi);
  ViStatus SendSoftwareTrigger(ViSession vi);
  ViStatus SetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean attributeValue);
  ViStatus SetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 attributeValue);
  ViStatus SetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 attributeValue);
  ViStatus SetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession attributeValue);
  ViStatus SetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViString attributeValue);
  ViStatus UnlockSession(ViSession vi, ViBoolean* callerHasLock);
  ViStatus Close(ViSession vi);
  ViStatus error_message(ViSession vi, ViStatus errorCode, ViChar errorMessage[256]);
  ViStatus Init(ViString resourceName, ViBoolean idQuery, ViBoolean resetDevice, ViSession* vi);
  ViStatus Reset(ViSession vi);
  ViStatus SelfTest(ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[256]);

 private:
  using AbortPtr = decltype(&niDMM_Abort);
  using ConfigureCurrentSourcePtr = decltype(&niDMM_ConfigureCurrentSource);
  using ConfigureMeasurementAbsolutePtr = decltype(&niDMM_ConfigureMeasurementAbsolute);
  using ConfigureMeasurementDigitsPtr = decltype(&niDMM_ConfigureMeasurementDigits);
  using ConfigureMultiPointPtr = decltype(&niDMM_ConfigureMultiPoint);
  using ConfigureRTDCustomPtr = decltype(&niDMM_ConfigureRTDCustom);
  using ConfigureRTDTypePtr = decltype(&niDMM_ConfigureRTDType);
  using ConfigureThermistorCustomPtr = decltype(&niDMM_ConfigureThermistorCustom);
  using ConfigureThermocouplePtr = decltype(&niDMM_ConfigureThermocouple);
  using ConfigureTriggerPtr = decltype(&niDMM_ConfigureTrigger);
  using ConfigureWaveformAcquisitionPtr = decltype(&niDMM_ConfigureWaveformAcquisition);
  using DisablePtr = decltype(&niDMM_Disable);
  using ExportAttributeConfigurationBufferPtr = decltype(&niDMM_ExportAttributeConfigurationBuffer);
  using ExportAttributeConfigurationFilePtr = decltype(&niDMM_ExportAttributeConfigurationFile);
  using FetchPtr = decltype(&niDMM_Fetch);
  using FetchMultiPointPtr = decltype(&niDMM_FetchMultiPoint);
  using FetchWaveformPtr = decltype(&niDMM_FetchWaveform);
  using GetAttributeViBooleanPtr = decltype(&niDMM_GetAttributeViBoolean);
  using GetAttributeViInt32Ptr = decltype(&niDMM_GetAttributeViInt32);
  using GetAttributeViReal64Ptr = decltype(&niDMM_GetAttributeViReal64);
  using GetAttributeViSessionPtr = decltype(&niDMM_GetAttributeViSession);
  using GetAttributeViStringPtr = decltype(&niDMM_GetAttributeViString);
  using GetCalDateAndTimePtr = ViStatus (*)(ViSession vi, ViInt32 calType, ViInt32* month, ViInt32* day, ViInt32* year, ViInt32* hour, ViInt32* minute);
  using GetDevTempPtr = decltype(&niDMM_GetDevTemp);
  using GetErrorPtr = ViStatus (*)(ViSession vi, ViStatus* errorCode, ViInt32 bufferSize, ViChar description[]);
  using GetErrorMessagePtr = decltype(&niDMM_GetErrorMessage);
  using GetExtCalRecommendedIntervalPtr = decltype(&niDMM_GetExtCalRecommendedInterval);
  using GetLastCalTempPtr = decltype(&niDMM_GetLastCalTemp);
  using GetSelfCalSupportedPtr = decltype(&niDMM_GetSelfCalSupported);
  using ImportAttributeConfigurationBufferPtr = decltype(&niDMM_ImportAttributeConfigurationBuffer);
  using ImportAttributeConfigurationFilePtr = decltype(&niDMM_ImportAttributeConfigurationFile);
  using InitWithOptionsPtr = decltype(&niDMM_InitWithOptions);
  using InitiatePtr = ViStatus (*)(ViSession vi);
  using LockSessionPtr = decltype(&niDMM_LockSession);
  using PerformOpenCableCompPtr = decltype(&niDMM_PerformOpenCableComp);
  using PerformShortCableCompPtr = decltype(&niDMM_PerformShortCableComp);
  using ReadPtr = decltype(&niDMM_Read);
  using ReadMultiPointPtr = decltype(&niDMM_ReadMultiPoint);
  using ReadStatusPtr = decltype(&niDMM_ReadStatus);
  using ReadWaveformPtr = decltype(&niDMM_ReadWaveform);
  using ResetWithDefaultsPtr = decltype(&niDMM_ResetWithDefaults);
  using SelfCalPtr = decltype(&niDMM_SelfCal);
  using SendSoftwareTriggerPtr = decltype(&niDMM_SendSoftwareTrigger);
  using SetAttributeViBooleanPtr = decltype(&niDMM_SetAttributeViBoolean);
  using SetAttributeViInt32Ptr = decltype(&niDMM_SetAttributeViInt32);
  using SetAttributeViReal64Ptr = decltype(&niDMM_SetAttributeViReal64);
  using SetAttributeViSessionPtr = decltype(&niDMM_SetAttributeViSession);
  using SetAttributeViStringPtr = decltype(&niDMM_SetAttributeViString);
  using UnlockSessionPtr = decltype(&niDMM_UnlockSession);
  using ClosePtr = decltype(&niDMM_close);
  using error_messagePtr = ViStatus (*)(ViSession vi, ViStatus errorCode, ViChar errorMessage[256]);
  using InitPtr = decltype(&niDMM_init);
  using ResetPtr = decltype(&niDMM_reset);
  using SelfTestPtr = decltype(&niDMM_self_test);

  typedef struct FunctionPointers {
    AbortPtr Abort;
    ConfigureCurrentSourcePtr ConfigureCurrentSource;
    ConfigureMeasurementAbsolutePtr ConfigureMeasurementAbsolute;
    ConfigureMeasurementDigitsPtr ConfigureMeasurementDigits;
    ConfigureMultiPointPtr ConfigureMultiPoint;
    ConfigureRTDCustomPtr ConfigureRTDCustom;
    ConfigureRTDTypePtr ConfigureRTDType;
    ConfigureThermistorCustomPtr ConfigureThermistorCustom;
    ConfigureThermocouplePtr ConfigureThermocouple;
    ConfigureTriggerPtr ConfigureTrigger;
    ConfigureWaveformAcquisitionPtr ConfigureWaveformAcquisition;
    DisablePtr Disable;
    ExportAttributeConfigurationBufferPtr ExportAttributeConfigurationBuffer;
    ExportAttributeConfigurationFilePtr ExportAttributeConfigurationFile;
    FetchPtr Fetch;
    FetchMultiPointPtr FetchMultiPoint;
    FetchWaveformPtr FetchWaveform;
    GetAttributeViBooleanPtr GetAttributeViBoolean;
    GetAttributeViInt32Ptr GetAttributeViInt32;
    GetAttributeViReal64Ptr GetAttributeViReal64;
    GetAttributeViSessionPtr GetAttributeViSession;
    GetAttributeViStringPtr GetAttributeViString;
    GetCalDateAndTimePtr GetCalDateAndTime;
    GetDevTempPtr GetDevTemp;
    GetErrorPtr GetError;
    GetErrorMessagePtr GetErrorMessage;
    GetExtCalRecommendedIntervalPtr GetExtCalRecommendedInterval;
    GetLastCalTempPtr GetLastCalTemp;
    GetSelfCalSupportedPtr GetSelfCalSupported;
    ImportAttributeConfigurationBufferPtr ImportAttributeConfigurationBuffer;
    ImportAttributeConfigurationFilePtr ImportAttributeConfigurationFile;
    InitWithOptionsPtr InitWithOptions;
    InitiatePtr Initiate;
    LockSessionPtr LockSession;
    PerformOpenCableCompPtr PerformOpenCableComp;
    PerformShortCableCompPtr PerformShortCableComp;
    ReadPtr Read;
    ReadMultiPointPtr ReadMultiPoint;
    ReadStatusPtr ReadStatus;
    ReadWaveformPtr ReadWaveform;
    ResetWithDefaultsPtr ResetWithDefaults;
    SelfCalPtr SelfCal;
    SendSoftwareTriggerPtr SendSoftwareTrigger;
    SetAttributeViBooleanPtr SetAttributeViBoolean;
    SetAttributeViInt32Ptr SetAttributeViInt32;
    SetAttributeViReal64Ptr SetAttributeViReal64;
    SetAttributeViSessionPtr SetAttributeViSession;
    SetAttributeViStringPtr SetAttributeViString;
    UnlockSessionPtr UnlockSession;
    ClosePtr Close;
    error_messagePtr error_message;
    InitPtr Init;
    ResetPtr Reset;
    SelfTestPtr SelfTest;
  } FunctionLoadStatus;

  nidevice_grpc::SharedLibrary shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nidmm_grpc

#endif  // NIDMM_GRPC_LIBRARY_H
