
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// EXPERIMENTAL Client convenience wrapper for NI-DMM.
//---------------------------------------------------------------------
#include "nidmm_client.h"

#include <grpcpp/grpcpp.h>

#include <nidmm.grpc.pb.h>

#include <cstdint>
#include <memory>
#include <stdexcept>
#include <vector>

namespace nidmm_grpc::experimental::client {

AbortResponse
abort(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = AbortRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = AbortResponse{};

  raise_if_error(
      stub->Abort(&context, request, &response),
      context);

  return response;
}

ConfigureCurrentSourceResponse
configure_current_source(const StubPtr& stub, const nidevice_grpc::Session& vi, const double& current_source)
{
  ::grpc::ClientContext context;

  auto request = ConfigureCurrentSourceRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_current_source(current_source);

  auto response = ConfigureCurrentSourceResponse{};

  raise_if_error(
      stub->ConfigureCurrentSource(&context, request, &response),
      context);

  return response;
}

ConfigureMeasurementAbsoluteResponse
configure_measurement_absolute(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<Function, pb::int32>& measurement_function, const double& range, const double& resolution_absolute)
{
  ::grpc::ClientContext context;

  auto request = ConfigureMeasurementAbsoluteRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto measurement_function_ptr = measurement_function.get_if<Function>();
  const auto measurement_function_raw_ptr = measurement_function.get_if<pb::int32>();
  if (measurement_function_ptr) {
    request.set_measurement_function(*measurement_function_ptr);
  }
  else if (measurement_function_raw_ptr) {
    request.set_measurement_function_raw(*measurement_function_raw_ptr);
  }
  request.set_range(range);
  request.set_resolution_absolute(resolution_absolute);

  auto response = ConfigureMeasurementAbsoluteResponse{};

  raise_if_error(
      stub->ConfigureMeasurementAbsolute(&context, request, &response),
      context);

  return response;
}

ConfigureMeasurementDigitsResponse
configure_measurement_digits(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<Function, pb::int32>& measurement_function, const double& range, const double& resolution_digits)
{
  ::grpc::ClientContext context;

  auto request = ConfigureMeasurementDigitsRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto measurement_function_ptr = measurement_function.get_if<Function>();
  const auto measurement_function_raw_ptr = measurement_function.get_if<pb::int32>();
  if (measurement_function_ptr) {
    request.set_measurement_function(*measurement_function_ptr);
  }
  else if (measurement_function_raw_ptr) {
    request.set_measurement_function_raw(*measurement_function_raw_ptr);
  }
  request.set_range(range);
  request.set_resolution_digits(resolution_digits);

  auto response = ConfigureMeasurementDigitsResponse{};

  raise_if_error(
      stub->ConfigureMeasurementDigits(&context, request, &response),
      context);

  return response;
}

ConfigureMultiPointResponse
configure_multi_point(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& trigger_count, const pb::int32& sample_count, const simple_variant<SampleTrigger, pb::int32>& sample_trigger, const double& sample_interval)
{
  ::grpc::ClientContext context;

  auto request = ConfigureMultiPointRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_trigger_count(trigger_count);
  request.set_sample_count(sample_count);
  const auto sample_trigger_ptr = sample_trigger.get_if<SampleTrigger>();
  const auto sample_trigger_raw_ptr = sample_trigger.get_if<pb::int32>();
  if (sample_trigger_ptr) {
    request.set_sample_trigger(*sample_trigger_ptr);
  }
  else if (sample_trigger_raw_ptr) {
    request.set_sample_trigger_raw(*sample_trigger_raw_ptr);
  }
  request.set_sample_interval(sample_interval);

  auto response = ConfigureMultiPointResponse{};

  raise_if_error(
      stub->ConfigureMultiPoint(&context, request, &response),
      context);

  return response;
}

ConfigureRTDCustomResponse
configure_rtd_custom(const StubPtr& stub, const nidevice_grpc::Session& vi, const double& rtd_a, const double& rtd_b, const double& rtd_c)
{
  ::grpc::ClientContext context;

  auto request = ConfigureRTDCustomRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_rtd_a(rtd_a);
  request.set_rtd_b(rtd_b);
  request.set_rtd_c(rtd_c);

  auto response = ConfigureRTDCustomResponse{};

  raise_if_error(
      stub->ConfigureRTDCustom(&context, request, &response),
      context);

  return response;
}

ConfigureRTDTypeResponse
configure_rtd_type(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<RTDType, pb::int32>& rtd_type, const double& rtd_resistance)
{
  ::grpc::ClientContext context;

  auto request = ConfigureRTDTypeRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto rtd_type_ptr = rtd_type.get_if<RTDType>();
  const auto rtd_type_raw_ptr = rtd_type.get_if<pb::int32>();
  if (rtd_type_ptr) {
    request.set_rtd_type(*rtd_type_ptr);
  }
  else if (rtd_type_raw_ptr) {
    request.set_rtd_type_raw(*rtd_type_raw_ptr);
  }
  request.set_rtd_resistance(rtd_resistance);

  auto response = ConfigureRTDTypeResponse{};

  raise_if_error(
      stub->ConfigureRTDType(&context, request, &response),
      context);

  return response;
}

ConfigureThermistorCustomResponse
configure_thermistor_custom(const StubPtr& stub, const nidevice_grpc::Session& vi, const double& thermistor_a, const double& thermistor_b, const double& thermistor_c)
{
  ::grpc::ClientContext context;

  auto request = ConfigureThermistorCustomRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_thermistor_a(thermistor_a);
  request.set_thermistor_b(thermistor_b);
  request.set_thermistor_c(thermistor_c);

  auto response = ConfigureThermistorCustomResponse{};

  raise_if_error(
      stub->ConfigureThermistorCustom(&context, request, &response),
      context);

  return response;
}

ConfigureThermocoupleResponse
configure_thermocouple(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<ThermocoupleType, pb::int32>& thermocouple_type, const simple_variant<ThermocoupleReferenceJunctionType, pb::int32>& reference_junction_type)
{
  ::grpc::ClientContext context;

  auto request = ConfigureThermocoupleRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto thermocouple_type_ptr = thermocouple_type.get_if<ThermocoupleType>();
  const auto thermocouple_type_raw_ptr = thermocouple_type.get_if<pb::int32>();
  if (thermocouple_type_ptr) {
    request.set_thermocouple_type(*thermocouple_type_ptr);
  }
  else if (thermocouple_type_raw_ptr) {
    request.set_thermocouple_type_raw(*thermocouple_type_raw_ptr);
  }
  const auto reference_junction_type_ptr = reference_junction_type.get_if<ThermocoupleReferenceJunctionType>();
  const auto reference_junction_type_raw_ptr = reference_junction_type.get_if<pb::int32>();
  if (reference_junction_type_ptr) {
    request.set_reference_junction_type(*reference_junction_type_ptr);
  }
  else if (reference_junction_type_raw_ptr) {
    request.set_reference_junction_type_raw(*reference_junction_type_raw_ptr);
  }

  auto response = ConfigureThermocoupleResponse{};

  raise_if_error(
      stub->ConfigureThermocouple(&context, request, &response),
      context);

  return response;
}

ConfigureTriggerResponse
configure_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<TriggerSource, pb::int32>& trigger_source, const double& trigger_delay)
{
  ::grpc::ClientContext context;

  auto request = ConfigureTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto trigger_source_ptr = trigger_source.get_if<TriggerSource>();
  const auto trigger_source_raw_ptr = trigger_source.get_if<pb::int32>();
  if (trigger_source_ptr) {
    request.set_trigger_source(*trigger_source_ptr);
  }
  else if (trigger_source_raw_ptr) {
    request.set_trigger_source_raw(*trigger_source_raw_ptr);
  }
  request.set_trigger_delay(trigger_delay);

  auto response = ConfigureTriggerResponse{};

  raise_if_error(
      stub->ConfigureTrigger(&context, request, &response),
      context);

  return response;
}

ConfigureWaveformAcquisitionResponse
configure_waveform_acquisition(const StubPtr& stub, const nidevice_grpc::Session& vi, const simple_variant<Function, pb::int32>& measurement_function, const double& range, const double& rate, const pb::int32& waveform_points)
{
  ::grpc::ClientContext context;

  auto request = ConfigureWaveformAcquisitionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  const auto measurement_function_ptr = measurement_function.get_if<Function>();
  const auto measurement_function_raw_ptr = measurement_function.get_if<pb::int32>();
  if (measurement_function_ptr) {
    request.set_measurement_function(*measurement_function_ptr);
  }
  else if (measurement_function_raw_ptr) {
    request.set_measurement_function_raw(*measurement_function_raw_ptr);
  }
  request.set_range(range);
  request.set_rate(rate);
  request.set_waveform_points(waveform_points);

  auto response = ConfigureWaveformAcquisitionResponse{};

  raise_if_error(
      stub->ConfigureWaveformAcquisition(&context, request, &response),
      context);

  return response;
}

DisableResponse
disable(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = DisableRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = DisableResponse{};

  raise_if_error(
      stub->Disable(&context, request, &response),
      context);

  return response;
}

ExportAttributeConfigurationBufferResponse
export_attribute_configuration_buffer(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ExportAttributeConfigurationBufferRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ExportAttributeConfigurationBufferResponse{};

  raise_if_error(
      stub->ExportAttributeConfigurationBuffer(&context, request, &response),
      context);

  return response;
}

ExportAttributeConfigurationFileResponse
export_attribute_configuration_file(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& file_path)
{
  ::grpc::ClientContext context;

  auto request = ExportAttributeConfigurationFileRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_file_path(file_path);

  auto response = ExportAttributeConfigurationFileResponse{};

  raise_if_error(
      stub->ExportAttributeConfigurationFile(&context, request, &response),
      context);

  return response;
}

FetchResponse
fetch(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& maximum_time)
{
  ::grpc::ClientContext context;

  auto request = FetchRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_maximum_time(maximum_time);

  auto response = FetchResponse{};

  raise_if_error(
      stub->Fetch(&context, request, &response),
      context);

  return response;
}

FetchMultiPointResponse
fetch_multi_point(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& maximum_time, const pb::int32& array_size)
{
  ::grpc::ClientContext context;

  auto request = FetchMultiPointRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_maximum_time(maximum_time);
  request.set_array_size(array_size);

  auto response = FetchMultiPointResponse{};

  raise_if_error(
      stub->FetchMultiPoint(&context, request, &response),
      context);

  return response;
}

FetchWaveformResponse
fetch_waveform(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& maximum_time, const pb::int32& array_size)
{
  ::grpc::ClientContext context;

  auto request = FetchWaveformRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_maximum_time(maximum_time);
  request.set_array_size(array_size);

  auto response = FetchWaveformResponse{};

  raise_if_error(
      stub->FetchWaveform(&context, request, &response),
      context);

  return response;
}

GetAttributeViBooleanResponse
get_attribute_vi_boolean(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDmmAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViBooleanRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViBooleanResponse{};

  raise_if_error(
      stub->GetAttributeViBoolean(&context, request, &response),
      context);

  return response;
}

GetAttributeViInt32Response
get_attribute_vi_int32(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDmmAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViInt32Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViInt32Response{};

  raise_if_error(
      stub->GetAttributeViInt32(&context, request, &response),
      context);

  return response;
}

GetAttributeViReal64Response
get_attribute_vi_real64(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDmmAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViReal64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViReal64Response{};

  raise_if_error(
      stub->GetAttributeViReal64(&context, request, &response),
      context);

  return response;
}

GetAttributeViSessionResponse
get_attribute_vi_session(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDmmAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViSessionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViSessionResponse{};

  raise_if_error(
      stub->GetAttributeViSession(&context, request, &response),
      context);

  return response;
}

GetAttributeViStringResponse
get_attribute_vi_string(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDmmAttribute& attribute_id)
{
  ::grpc::ClientContext context;

  auto request = GetAttributeViStringRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);

  auto response = GetAttributeViStringResponse{};

  raise_if_error(
      stub->GetAttributeViString(&context, request, &response),
      context);

  return response;
}

GetDevTempResponse
get_dev_temp(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& options)
{
  ::grpc::ClientContext context;

  auto request = GetDevTempRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_options(options);

  auto response = GetDevTempResponse{};

  raise_if_error(
      stub->GetDevTemp(&context, request, &response),
      context);

  return response;
}

GetErrorMessageResponse
get_error_message(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& error_code)
{
  ::grpc::ClientContext context;

  auto request = GetErrorMessageRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_error_code(error_code);

  auto response = GetErrorMessageResponse{};

  raise_if_error(
      stub->GetErrorMessage(&context, request, &response),
      context);

  return response;
}

GetExtCalRecommendedIntervalResponse
get_ext_cal_recommended_interval(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetExtCalRecommendedIntervalRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetExtCalRecommendedIntervalResponse{};

  raise_if_error(
      stub->GetExtCalRecommendedInterval(&context, request, &response),
      context);

  return response;
}

GetLastCalTempResponse
get_last_cal_temp(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& cal_type)
{
  ::grpc::ClientContext context;

  auto request = GetLastCalTempRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_cal_type(cal_type);

  auto response = GetLastCalTempResponse{};

  raise_if_error(
      stub->GetLastCalTemp(&context, request, &response),
      context);

  return response;
}

GetSelfCalSupportedResponse
get_self_cal_supported(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = GetSelfCalSupportedRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = GetSelfCalSupportedResponse{};

  raise_if_error(
      stub->GetSelfCalSupported(&context, request, &response),
      context);

  return response;
}

ImportAttributeConfigurationBufferResponse
import_attribute_configuration_buffer(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& configuration)
{
  ::grpc::ClientContext context;

  auto request = ImportAttributeConfigurationBufferRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_configuration(configuration);

  auto response = ImportAttributeConfigurationBufferResponse{};

  raise_if_error(
      stub->ImportAttributeConfigurationBuffer(&context, request, &response),
      context);

  return response;
}

ImportAttributeConfigurationFileResponse
import_attribute_configuration_file(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& file_path)
{
  ::grpc::ClientContext context;

  auto request = ImportAttributeConfigurationFileRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_file_path(file_path);

  auto response = ImportAttributeConfigurationFileResponse{};

  raise_if_error(
      stub->ImportAttributeConfigurationFile(&context, request, &response),
      context);

  return response;
}

InitWithOptionsResponse
init_with_options(const StubPtr& stub, const pb::string& resource_name, const bool& id_query, const bool& reset_device, const pb::string& option_string)
{
  ::grpc::ClientContext context;

  auto request = InitWithOptionsRequest{};
  request.set_resource_name(resource_name);
  request.set_id_query(id_query);
  request.set_reset_device(reset_device);
  request.set_option_string(option_string);

  auto response = InitWithOptionsResponse{};

  raise_if_error(
      stub->InitWithOptions(&context, request, &response),
      context);

  return response;
}

LockSessionResponse
lock_session(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = LockSessionRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = LockSessionResponse{};

  raise_if_error(
      stub->LockSession(&context, request, &response),
      context);

  return response;
}

PerformOpenCableCompResponse
perform_open_cable_comp(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = PerformOpenCableCompRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = PerformOpenCableCompResponse{};

  raise_if_error(
      stub->PerformOpenCableComp(&context, request, &response),
      context);

  return response;
}

PerformShortCableCompResponse
perform_short_cable_comp(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = PerformShortCableCompRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = PerformShortCableCompResponse{};

  raise_if_error(
      stub->PerformShortCableComp(&context, request, &response),
      context);

  return response;
}

ReadResponse
read(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& maximum_time)
{
  ::grpc::ClientContext context;

  auto request = ReadRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_maximum_time(maximum_time);

  auto response = ReadResponse{};

  raise_if_error(
      stub->Read(&context, request, &response),
      context);

  return response;
}

ReadMultiPointResponse
read_multi_point(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& maximum_time, const pb::int32& array_size)
{
  ::grpc::ClientContext context;

  auto request = ReadMultiPointRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_maximum_time(maximum_time);
  request.set_array_size(array_size);

  auto response = ReadMultiPointResponse{};

  raise_if_error(
      stub->ReadMultiPoint(&context, request, &response),
      context);

  return response;
}

ReadStatusResponse
read_status(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ReadStatusRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ReadStatusResponse{};

  raise_if_error(
      stub->ReadStatus(&context, request, &response),
      context);

  return response;
}

ReadWaveformResponse
read_waveform(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::int32& maximum_time, const pb::int32& array_size)
{
  ::grpc::ClientContext context;

  auto request = ReadWaveformRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_maximum_time(maximum_time);
  request.set_array_size(array_size);

  auto response = ReadWaveformResponse{};

  raise_if_error(
      stub->ReadWaveform(&context, request, &response),
      context);

  return response;
}

ResetWithDefaultsResponse
reset_with_defaults(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ResetWithDefaultsRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ResetWithDefaultsResponse{};

  raise_if_error(
      stub->ResetWithDefaults(&context, request, &response),
      context);

  return response;
}

SelfCalResponse
self_cal(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = SelfCalRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = SelfCalResponse{};

  raise_if_error(
      stub->SelfCal(&context, request, &response),
      context);

  return response;
}

SendSoftwareTriggerResponse
send_software_trigger(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = SendSoftwareTriggerRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = SendSoftwareTriggerResponse{};

  raise_if_error(
      stub->SendSoftwareTrigger(&context, request, &response),
      context);

  return response;
}

SetAttributeViBooleanResponse
set_attribute_vi_boolean(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDmmAttribute& attribute_id, const bool& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViBooleanRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attribute_value(attribute_value);

  auto response = SetAttributeViBooleanResponse{};

  raise_if_error(
      stub->SetAttributeViBoolean(&context, request, &response),
      context);

  return response;
}

SetAttributeViInt32Response
set_attribute_vi_int32(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDmmAttribute& attribute_id, const simple_variant<NiDmmInt32AttributeValues, pb::int32>& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViInt32Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  const auto attribute_value_ptr = attribute_value.get_if<NiDmmInt32AttributeValues>();
  const auto attribute_value_raw_ptr = attribute_value.get_if<pb::int32>();
  if (attribute_value_ptr) {
    request.set_attribute_value(*attribute_value_ptr);
  }
  else if (attribute_value_raw_ptr) {
    request.set_attribute_value_raw(*attribute_value_raw_ptr);
  }

  auto response = SetAttributeViInt32Response{};

  raise_if_error(
      stub->SetAttributeViInt32(&context, request, &response),
      context);

  return response;
}

SetAttributeViReal64Response
set_attribute_vi_real64(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDmmAttribute& attribute_id, const simple_variant<NiDmmReal64AttributeValuesMapped, double>& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViReal64Request{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  const auto attribute_value_ptr = attribute_value.get_if<NiDmmReal64AttributeValuesMapped>();
  const auto attribute_value_raw_ptr = attribute_value.get_if<double>();
  if (attribute_value_ptr) {
    request.set_attribute_value_mapped(*attribute_value_ptr);
  }
  else if (attribute_value_raw_ptr) {
    request.set_attribute_value_raw(*attribute_value_raw_ptr);
  }

  auto response = SetAttributeViReal64Response{};

  raise_if_error(
      stub->SetAttributeViReal64(&context, request, &response),
      context);

  return response;
}

SetAttributeViSessionResponse
set_attribute_vi_session(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDmmAttribute& attribute_id, const nidevice_grpc::Session& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViSessionRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.mutable_attribute_value()->CopyFrom(attribute_value);

  auto response = SetAttributeViSessionResponse{};

  raise_if_error(
      stub->SetAttributeViSession(&context, request, &response),
      context);

  return response;
}

SetAttributeViStringResponse
set_attribute_vi_string(const StubPtr& stub, const nidevice_grpc::Session& vi, const pb::string& channel_name, const NiDmmAttribute& attribute_id, const pb::string& attribute_value)
{
  ::grpc::ClientContext context;

  auto request = SetAttributeViStringRequest{};
  request.mutable_vi()->CopyFrom(vi);
  request.set_channel_name(channel_name);
  request.set_attribute_id(attribute_id);
  request.set_attribute_value_raw(attribute_value);

  auto response = SetAttributeViStringResponse{};

  raise_if_error(
      stub->SetAttributeViString(&context, request, &response),
      context);

  return response;
}

UnlockSessionResponse
unlock_session(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = UnlockSessionRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = UnlockSessionResponse{};

  raise_if_error(
      stub->UnlockSession(&context, request, &response),
      context);

  return response;
}

CloseResponse
close(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = CloseRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = CloseResponse{};

  raise_if_error(
      stub->Close(&context, request, &response),
      context);

  return response;
}

InitResponse
init(const StubPtr& stub, const pb::string& resource_name, const bool& id_query, const bool& reset_device)
{
  ::grpc::ClientContext context;

  auto request = InitRequest{};
  request.set_resource_name(resource_name);
  request.set_id_query(id_query);
  request.set_reset_device(reset_device);

  auto response = InitResponse{};

  raise_if_error(
      stub->Init(&context, request, &response),
      context);

  return response;
}

ResetResponse
reset(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = ResetRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = ResetResponse{};

  raise_if_error(
      stub->Reset(&context, request, &response),
      context);

  return response;
}

SelfTestResponse
self_test(const StubPtr& stub, const nidevice_grpc::Session& vi)
{
  ::grpc::ClientContext context;

  auto request = SelfTestRequest{};
  request.mutable_vi()->CopyFrom(vi);

  auto response = SelfTestResponse{};

  raise_if_error(
      stub->SelfTest(&context, request, &response),
      context);

  return response;
}


} // namespace nidmm_grpc::experimental::client
