//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-IOTRACE Metadata
//---------------------------------------------------------------------
#include "niiotrace_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "NiSpyLog.dll";
#else
static const char* kLibraryName = "liblibNiSpyLog.so";
#endif

namespace niiotrace_grpc {

NiIOTraceLibrary::NiIOTraceLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.StartTracing = reinterpret_cast<StartTracingPtr>(shared_library_.get_function_pointer("nispy_StartSpying"));
}

NiIOTraceLibrary::~NiIOTraceLibrary()
{
}

::grpc::Status NiIOTraceLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

int32_t NiIOTraceLibrary::StartTracing(int32_t logFileSetting, const char filePathString[], int32_t fileWriteMode)
{
  if (!function_pointers_.StartTracing) {
    throw nidevice_grpc::LibraryLoadException("Could not find nispy_StartSpying.");
  }
#if defined(_MSC_VER)
  return nispy_StartSpying(static_cast<eNiSpyLogFileSetting>(logFileSetting), filePathString, static_cast<eNiSpyAPIFileWriteMode>(fileWriteMode));
#else
  return function_pointers_.StartTracing(logFileSetting, filePathString, fileWriteMode);
#endif
}

}  // namespace niiotrace_grpc
