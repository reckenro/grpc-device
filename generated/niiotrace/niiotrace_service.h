
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service header for the NI-IOTRACE Metadata
//---------------------------------------------------------------------
#ifndef NIIOTRACE_GRPC_SERVICE_H
#define NIIOTRACE_GRPC_SERVICE_H

#include <niiotrace.grpc.pb.h>
#include <condition_variable>
#include <grpcpp/grpcpp.h>
#include <grpcpp/health_check_service_interface.h>
#include <grpcpp/ext/proto_server_reflection_plugin.h>
#include <map>
#include <server/converters.h>
#include <server/feature_toggles.h>
#include <server/session_resource_repository.h>
#include <server/shared_library.h>
#include <server/exceptions.h>

#include "niiotrace_library_interface.h"

namespace niiotrace_grpc {

struct NiIOTraceFeatureToggles
{
  using CodeReadiness = nidevice_grpc::FeatureToggles::CodeReadiness;
  NiIOTraceFeatureToggles(const nidevice_grpc::FeatureToggles& feature_toggles = {});

  bool is_enabled;
};

class NiIOTraceService final : public NiIOTrace::Service {
public:
  using ResourceRepositorySharedPtr = std::shared_ptr<nidevice_grpc::SessionResourceRepository<ViSession>>;

  NiIOTraceService(
    NiIOTraceLibraryInterface* library,
    ResourceRepositorySharedPtr resource_repository,
    const NiIOTraceFeatureToggles& feature_toggles = {});
  virtual ~NiIOTraceService();
  
  ::grpc::Status StartTracing(::grpc::ServerContext* context, const StartTracingRequest* request, StartTracingResponse* response) override;
private:
  NiIOTraceLibraryInterface* library_;
  ResourceRepositorySharedPtr session_repository_;

  NiIOTraceFeatureToggles feature_toggles_;
};

} // namespace niiotrace_grpc

#endif  // NIIOTRACE_GRPC_SERVICE_H
