
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service header for the IO-TRACE Metadata
//---------------------------------------------------------------------
#ifndef IOTRACE_GRPC_SERVICE_H
#define IOTRACE_GRPC_SERVICE_H

#include <iotrace.grpc.pb.h>
#include <condition_variable>
#include <grpcpp/grpcpp.h>
#include <grpcpp/health_check_service_interface.h>
#include <grpcpp/ext/proto_server_reflection_plugin.h>
#include <map>
#include <server/converters.h>
#include <server/feature_toggles.h>
#include <server/session_resource_repository.h>
#include <server/shared_library.h>
#include <server/exceptions.h>

#include "iotrace_library_interface.h"

namespace iotrace_grpc {

struct IOTraceFeatureToggles
{
  using CodeReadiness = nidevice_grpc::FeatureToggles::CodeReadiness;
  IOTraceFeatureToggles(const nidevice_grpc::FeatureToggles& feature_toggles = {});

  bool is_enabled;
};

class IOTraceService final : public IOTrace::Service {
public:
  using ResourceRepositorySharedPtr = std::shared_ptr<nidevice_grpc::SessionResourceRepository<int32_t>>;

  IOTraceService(
    IOTraceLibraryInterface* library,
    ResourceRepositorySharedPtr resource_repository,
    const IOTraceFeatureToggles& feature_toggles = {});
  virtual ~IOTraceService();
  
  ::grpc::Status CloseIOTrace(::grpc::ServerContext* context, const CloseIOTraceRequest* request, CloseIOTraceResponse* response) override;
  ::grpc::Status GetIOTracePath(::grpc::ServerContext* context, const GetIOTracePathRequest* request, GetIOTracePathResponse* response) override;
  ::grpc::Status LogMessage(::grpc::ServerContext* context, const LogMessageRequest* request, LogMessageResponse* response) override;
  ::grpc::Status StartTracing(::grpc::ServerContext* context, const StartTracingRequest* request, StartTracingResponse* response) override;
  ::grpc::Status StopTracing(::grpc::ServerContext* context, const StopTracingRequest* request, StopTracingResponse* response) override;
private:
  IOTraceLibraryInterface* library_;
  ResourceRepositorySharedPtr session_repository_;

  IOTraceFeatureToggles feature_toggles_;
};

} // namespace iotrace_grpc

#endif  // IOTRACE_GRPC_SERVICE_H
