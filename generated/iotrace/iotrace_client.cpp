
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// EXPERIMENTAL Client convenience wrapper for IO-TRACE.
//---------------------------------------------------------------------
#include "iotrace_client.h"

#include <grpcpp/grpcpp.h>

#include <iotrace.grpc.pb.h>

#include <cstdint>
#include <memory>
#include <stdexcept>
#include <vector>

namespace iotrace_grpc::experimental::client {

CloseIOTraceResponse
close_io_trace(const StubPtr& stub)
{
  ::grpc::ClientContext context;

  auto request = CloseIOTraceRequest{};

  auto response = CloseIOTraceResponse{};

  raise_if_error(
      stub->CloseIOTrace(&context, request, &response));

  return response;
}

LogMessageResponse
log_message(const StubPtr& stub, const pb::string& message)
{
  ::grpc::ClientContext context;

  auto request = LogMessageRequest{};
  request.set_message(message);

  auto response = LogMessageResponse{};

  raise_if_error(
      stub->LogMessage(&context, request, &response));

  return response;
}

StartTracingResponse
start_tracing(const StubPtr& stub, const LogFileSetting& log_file_setting, const pb::string& file_path_string, const FileWriteMode& file_write_mode)
{
  ::grpc::ClientContext context;

  auto request = StartTracingRequest{};
  request.set_log_file_setting(log_file_setting);
  request.set_file_path_string(file_path_string);
  request.set_file_write_mode(file_write_mode);

  auto response = StartTracingResponse{};

  raise_if_error(
      stub->StartTracing(&context, request, &response));

  return response;
}

StopTracingResponse
stop_tracing(const StubPtr& stub)
{
  ::grpc::ClientContext context;

  auto request = StopTracingRequest{};

  auto response = StopTracingResponse{};

  raise_if_error(
      stub->StopTracing(&context, request, &response));

  return response;
}


} // namespace iotrace_grpc::experimental::client
